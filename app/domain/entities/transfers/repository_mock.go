// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transfers

import (
	"context"
	"github.com/sptGabriel/banking/app/domain/vos"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateFunc: func(ctx context.Context, transfer *Transfer) error {
// 				panic("mock out the Create method")
// 			},
// 			GetAllFunc: func(ctx context.Context, accountId vos.AccountId) ([]Transfer, error) {
// 				panic("mock out the GetAll method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, transfer *Transfer) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, accountId vos.AccountId) ([]Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transfer is the transfer argument value.
			Transfer *Transfer
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountId is the accountId argument value.
			AccountId vos.AccountId
		}
	}
	lockCreate sync.RWMutex
	lockGetAll sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, transfer *Transfer) error {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Transfer *Transfer
	}{
		Ctx:      ctx,
		Transfer: transfer,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, transfer)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx      context.Context
	Transfer *Transfer
} {
	var calls []struct {
		Ctx      context.Context
		Transfer *Transfer
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *RepositoryMock) GetAll(ctx context.Context, accountId vos.AccountId) ([]Transfer, error) {
	if mock.GetAllFunc == nil {
		panic("RepositoryMock.GetAllFunc: method is nil but Repository.GetAll was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountId vos.AccountId
	}{
		Ctx:       ctx,
		AccountId: accountId,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx, accountId)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedRepository.GetAllCalls())
func (mock *RepositoryMock) GetAllCalls() []struct {
	Ctx       context.Context
	AccountId vos.AccountId
} {
	var calls []struct {
		Ctx       context.Context
		AccountId vos.AccountId
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}
