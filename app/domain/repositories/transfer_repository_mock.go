// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repositories

import (
	"context"
	"github.com/sptGabriel/banking/app/domain/entities"
	"github.com/sptGabriel/banking/app/domain/vos"
	"sync"
)

// Ensure, that TransferRepositoryMock does implement TransferRepository.
// If this is not the case, regenerate this file with moq.
var _ TransferRepository = &TransferRepositoryMock{}

// TransferRepositoryMock is a mock implementation of TransferRepository.
//
// 	func TestSomethingThatUsesTransferRepository(t *testing.T) {
//
// 		// make and configure a mocked TransferRepository
// 		mockedTransferRepository := &TransferRepositoryMock{
// 			CreateFunc: func(ctx context.Context, account *entities.Transfer) error {
// 				panic("mock out the Create method")
// 			},
// 			GetAllFunc: func(ctx context.Context, accountId vos.AccountId) ([]entities.Transfer, error) {
// 				panic("mock out the GetAll method")
// 			},
// 		}
//
// 		// use mockedTransferRepository in code that requires TransferRepository
// 		// and then make assertions.
//
// 	}
type TransferRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, account *entities.Transfer) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, accountId vos.AccountId) ([]entities.Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *entities.Transfer
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountId is the accountId argument value.
			AccountId vos.AccountId
		}
	}
	lockCreate sync.RWMutex
	lockGetAll sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TransferRepositoryMock) Create(ctx context.Context, account *entities.Transfer) error {
	if mock.CreateFunc == nil {
		panic("TransferRepositoryMock.CreateFunc: method is nil but TransferRepository.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *entities.Transfer
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, account)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedTransferRepository.CreateCalls())
func (mock *TransferRepositoryMock) CreateCalls() []struct {
	Ctx     context.Context
	Account *entities.Transfer
} {
	var calls []struct {
		Ctx     context.Context
		Account *entities.Transfer
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TransferRepositoryMock) GetAll(ctx context.Context, accountId vos.AccountId) ([]entities.Transfer, error) {
	if mock.GetAllFunc == nil {
		panic("TransferRepositoryMock.GetAllFunc: method is nil but TransferRepository.GetAll was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountId vos.AccountId
	}{
		Ctx:       ctx,
		AccountId: accountId,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx, accountId)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedTransferRepository.GetAllCalls())
func (mock *TransferRepositoryMock) GetAllCalls() []struct {
	Ctx       context.Context
	AccountId vos.AccountId
} {
	var calls []struct {
		Ctx       context.Context
		AccountId vos.AccountId
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}
