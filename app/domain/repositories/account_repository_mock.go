// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repositories

import (
	"context"
	"github.com/sptGabriel/banking/app/domain/entities"
	"github.com/sptGabriel/banking/app/domain/vos"
	"sync"
)

// Ensure, that AccountRepositoryMock does implement AccountRepository.
// If this is not the case, regenerate this file with moq.
var _ AccountRepository = &AccountRepositoryMock{}

// AccountRepositoryMock is a mock implementation of AccountRepository.
//
// 	func TestSomethingThatUsesAccountRepository(t *testing.T) {
//
// 		// make and configure a mocked AccountRepository
// 		mockedAccountRepository := &AccountRepositoryMock{
// 			CreateFunc: func(ctx context.Context, account *entities.Account) error {
// 				panic("mock out the Create method")
// 			},
// 			DoesExistByCPFFunc: func(ctx context.Context, cpf vos.CPF) (bool, error) {
// 				panic("mock out the DoesExistByCPF method")
// 			},
// 			GetAllFunc: func(ctx context.Context) ([]entities.Account, error) {
// 				panic("mock out the GetAll method")
// 			},
// 			GetByCPFFunc: func(ctx context.Context, cpf vos.CPF) (*entities.Account, error) {
// 				panic("mock out the GetByCPF method")
// 			},
// 			GetByIDFunc: func(ctx context.Context, cpf vos.AccountId) (*entities.Account, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			UpdateBalanceFunc: func(ctx context.Context, account *entities.Account) error {
// 				panic("mock out the UpdateBalance method")
// 			},
// 		}
//
// 		// use mockedAccountRepository in code that requires AccountRepository
// 		// and then make assertions.
//
// 	}
type AccountRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, account *entities.Account) error

	// DoesExistByCPFFunc mocks the DoesExistByCPF method.
	DoesExistByCPFFunc func(ctx context.Context, cpf vos.CPF) (bool, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]entities.Account, error)

	// GetByCPFFunc mocks the GetByCPF method.
	GetByCPFFunc func(ctx context.Context, cpf vos.CPF) (*entities.Account, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, cpf vos.AccountId) (*entities.Account, error)

	// UpdateBalanceFunc mocks the UpdateBalance method.
	UpdateBalanceFunc func(ctx context.Context, account *entities.Account) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *entities.Account
		}
		// DoesExistByCPF holds details about calls to the DoesExistByCPF method.
		DoesExistByCPF []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf vos.CPF
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByCPF holds details about calls to the GetByCPF method.
		GetByCPF []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf vos.CPF
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf vos.AccountId
		}
		// UpdateBalance holds details about calls to the UpdateBalance method.
		UpdateBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *entities.Account
		}
	}
	lockCreate         sync.RWMutex
	lockDoesExistByCPF sync.RWMutex
	lockGetAll         sync.RWMutex
	lockGetByCPF       sync.RWMutex
	lockGetByID        sync.RWMutex
	lockUpdateBalance  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AccountRepositoryMock) Create(ctx context.Context, account *entities.Account) error {
	if mock.CreateFunc == nil {
		panic("AccountRepositoryMock.CreateFunc: method is nil but AccountRepository.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, account)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedAccountRepository.CreateCalls())
func (mock *AccountRepositoryMock) CreateCalls() []struct {
	Ctx     context.Context
	Account *entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account *entities.Account
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DoesExistByCPF calls DoesExistByCPFFunc.
func (mock *AccountRepositoryMock) DoesExistByCPF(ctx context.Context, cpf vos.CPF) (bool, error) {
	if mock.DoesExistByCPFFunc == nil {
		panic("AccountRepositoryMock.DoesExistByCPFFunc: method is nil but AccountRepository.DoesExistByCPF was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cpf vos.CPF
	}{
		Ctx: ctx,
		Cpf: cpf,
	}
	mock.lockDoesExistByCPF.Lock()
	mock.calls.DoesExistByCPF = append(mock.calls.DoesExistByCPF, callInfo)
	mock.lockDoesExistByCPF.Unlock()
	return mock.DoesExistByCPFFunc(ctx, cpf)
}

// DoesExistByCPFCalls gets all the calls that were made to DoesExistByCPF.
// Check the length with:
//     len(mockedAccountRepository.DoesExistByCPFCalls())
func (mock *AccountRepositoryMock) DoesExistByCPFCalls() []struct {
	Ctx context.Context
	Cpf vos.CPF
} {
	var calls []struct {
		Ctx context.Context
		Cpf vos.CPF
	}
	mock.lockDoesExistByCPF.RLock()
	calls = mock.calls.DoesExistByCPF
	mock.lockDoesExistByCPF.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *AccountRepositoryMock) GetAll(ctx context.Context) ([]entities.Account, error) {
	if mock.GetAllFunc == nil {
		panic("AccountRepositoryMock.GetAllFunc: method is nil but AccountRepository.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedAccountRepository.GetAllCalls())
func (mock *AccountRepositoryMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByCPF calls GetByCPFFunc.
func (mock *AccountRepositoryMock) GetByCPF(ctx context.Context, cpf vos.CPF) (*entities.Account, error) {
	if mock.GetByCPFFunc == nil {
		panic("AccountRepositoryMock.GetByCPFFunc: method is nil but AccountRepository.GetByCPF was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cpf vos.CPF
	}{
		Ctx: ctx,
		Cpf: cpf,
	}
	mock.lockGetByCPF.Lock()
	mock.calls.GetByCPF = append(mock.calls.GetByCPF, callInfo)
	mock.lockGetByCPF.Unlock()
	return mock.GetByCPFFunc(ctx, cpf)
}

// GetByCPFCalls gets all the calls that were made to GetByCPF.
// Check the length with:
//     len(mockedAccountRepository.GetByCPFCalls())
func (mock *AccountRepositoryMock) GetByCPFCalls() []struct {
	Ctx context.Context
	Cpf vos.CPF
} {
	var calls []struct {
		Ctx context.Context
		Cpf vos.CPF
	}
	mock.lockGetByCPF.RLock()
	calls = mock.calls.GetByCPF
	mock.lockGetByCPF.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *AccountRepositoryMock) GetByID(ctx context.Context, cpf vos.AccountId) (*entities.Account, error) {
	if mock.GetByIDFunc == nil {
		panic("AccountRepositoryMock.GetByIDFunc: method is nil but AccountRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cpf vos.AccountId
	}{
		Ctx: ctx,
		Cpf: cpf,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, cpf)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedAccountRepository.GetByIDCalls())
func (mock *AccountRepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	Cpf vos.AccountId
} {
	var calls []struct {
		Ctx context.Context
		Cpf vos.AccountId
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateBalance calls UpdateBalanceFunc.
func (mock *AccountRepositoryMock) UpdateBalance(ctx context.Context, account *entities.Account) error {
	if mock.UpdateBalanceFunc == nil {
		panic("AccountRepositoryMock.UpdateBalanceFunc: method is nil but AccountRepository.UpdateBalance was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockUpdateBalance.Lock()
	mock.calls.UpdateBalance = append(mock.calls.UpdateBalance, callInfo)
	mock.lockUpdateBalance.Unlock()
	return mock.UpdateBalanceFunc(ctx, account)
}

// UpdateBalanceCalls gets all the calls that were made to UpdateBalance.
// Check the length with:
//     len(mockedAccountRepository.UpdateBalanceCalls())
func (mock *AccountRepositoryMock) UpdateBalanceCalls() []struct {
	Ctx     context.Context
	Account *entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account *entities.Account
	}
	mock.lockUpdateBalance.RLock()
	calls = mock.calls.UpdateBalance
	mock.lockUpdateBalance.RUnlock()
	return calls
}
