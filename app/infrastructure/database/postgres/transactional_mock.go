// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package postgres

import (
	"context"
	"sync"
)

// Ensure, that TransactionalMock does implement Transactional.
// If this is not the case, regenerate this file with moq.
var _ Transactional = &TransactionalMock{}

// TransactionalMock is a mock implementation of Transactional.
//
// 	func TestSomethingThatUsesTransactional(t *testing.T) {
//
// 		// make and configure a mocked Transactional
// 		mockedTransactional := &TransactionalMock{
// 			ExecFunc: func(ctx context.Context, f func(context.Context) (interface{}, error)) (interface{}, error) {
// 				panic("mock out the Exec method")
// 			},
// 		}
//
// 		// use mockedTransactional in code that requires Transactional
// 		// and then make assertions.
//
// 	}
type TransactionalMock struct {
	// ExecFunc mocks the Exec method.
	ExecFunc func(ctx context.Context, f func(context.Context) (interface{}, error)) (interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// F is the f argument value.
			F func(context.Context) (interface{}, error)
		}
	}
	lockExec sync.RWMutex
}

// Exec calls ExecFunc.
func (mock *TransactionalMock) Exec(ctx context.Context, f func(context.Context) (interface{}, error)) (interface{}, error) {
	if mock.ExecFunc == nil {
		panic("TransactionalMock.ExecFunc: method is nil but Transactional.Exec was just called")
	}
	callInfo := struct {
		Ctx context.Context
		F   func(context.Context) (interface{}, error)
	}{
		Ctx: ctx,
		F:   f,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(ctx, f)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedTransactional.ExecCalls())
func (mock *TransactionalMock) ExecCalls() []struct {
	Ctx context.Context
	F   func(context.Context) (interface{}, error)
} {
	var calls []struct {
		Ctx context.Context
		F   func(context.Context) (interface{}, error)
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}
