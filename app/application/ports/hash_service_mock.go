// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ports

import (
	"sync"
)

// Ensure, that HashServiceMock does implement HashService.
// If this is not the case, regenerate this file with moq.
var _ HashService = &HashServiceMock{}

// HashServiceMock is a mock implementation of HashService.
//
// 	func TestSomethingThatUsesHashService(t *testing.T) {
//
// 		// make and configure a mocked HashService
// 		mockedHashService := &HashServiceMock{
// 			CompareFunc: func(hashedPassword []byte, password []byte) error {
// 				panic("mock out the Compare method")
// 			},
// 			HashFunc: func(secret *string) error {
// 				panic("mock out the Hash method")
// 			},
// 		}
//
// 		// use mockedHashService in code that requires HashService
// 		// and then make assertions.
//
// 	}
type HashServiceMock struct {
	// CompareFunc mocks the Compare method.
	CompareFunc func(hashedPassword []byte, password []byte) error

	// HashFunc mocks the Hash method.
	HashFunc func(secret *string) error

	// calls tracks calls to the methods.
	calls struct {
		// Compare holds details about calls to the Compare method.
		Compare []struct {
			// HashedPassword is the hashedPassword argument value.
			HashedPassword []byte
			// Password is the password argument value.
			Password []byte
		}
		// Hash holds details about calls to the Hash method.
		Hash []struct {
			// Secret is the secret argument value.
			Secret *string
		}
	}
	lockCompare sync.RWMutex
	lockHash    sync.RWMutex
}

// Compare calls CompareFunc.
func (mock *HashServiceMock) Compare(hashedPassword []byte, password []byte) error {
	if mock.CompareFunc == nil {
		panic("HashServiceMock.CompareFunc: method is nil but HashService.Compare was just called")
	}
	callInfo := struct {
		HashedPassword []byte
		Password       []byte
	}{
		HashedPassword: hashedPassword,
		Password:       password,
	}
	mock.lockCompare.Lock()
	mock.calls.Compare = append(mock.calls.Compare, callInfo)
	mock.lockCompare.Unlock()
	return mock.CompareFunc(hashedPassword, password)
}

// CompareCalls gets all the calls that were made to Compare.
// Check the length with:
//     len(mockedHashService.CompareCalls())
func (mock *HashServiceMock) CompareCalls() []struct {
	HashedPassword []byte
	Password       []byte
} {
	var calls []struct {
		HashedPassword []byte
		Password       []byte
	}
	mock.lockCompare.RLock()
	calls = mock.calls.Compare
	mock.lockCompare.RUnlock()
	return calls
}

// Hash calls HashFunc.
func (mock *HashServiceMock) Hash(secret *string) error {
	if mock.HashFunc == nil {
		panic("HashServiceMock.HashFunc: method is nil but HashService.Hash was just called")
	}
	callInfo := struct {
		Secret *string
	}{
		Secret: secret,
	}
	mock.lockHash.Lock()
	mock.calls.Hash = append(mock.calls.Hash, callInfo)
	mock.lockHash.Unlock()
	return mock.HashFunc(secret)
}

// HashCalls gets all the calls that were made to Hash.
// Check the length with:
//     len(mockedHashService.HashCalls())
func (mock *HashServiceMock) HashCalls() []struct {
	Secret *string
} {
	var calls []struct {
		Secret *string
	}
	mock.lockHash.RLock()
	calls = mock.calls.Hash
	mock.lockHash.RUnlock()
	return calls
}
